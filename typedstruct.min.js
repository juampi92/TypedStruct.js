/*!
 * TypedStruct.js - v0.1.0
 * (c) Juan Pablo Barreto <juampi92@gmail.com>
 * https://github.com/juampi92/TypedStruct.js
 */
!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):global.TypedStruct=factory()}(this,function(){"use strict";var DataViewProto=DataView.prototype,DataViewInt8=DataViewProto.getInt8,TypedStruct={_littleEndian:!0,setLittleEndian:function(val){this._littleEndian=val},_structs:{},_getStruct:function(name){var struct=this._structs[name];if(!struct)throw"TypedStruct: type '"+name+"' does not exist";return struct},add:function(name,guide,native){this._structs[name]&&console.info("TypedStruct: you are adding the same structure: "+name),this._structs[name]=this._createStructure(guide,native)},sizeOf:function(name){return this._getStruct(name).size},from:function(dataView,offset){return new DataViewCursor(dataView,offset)},_createStructure:function(guide,native){var struct=new Struct(guide,native);return struct.factory()}},Struct=function(guide,native){this.size=0,this.guide=null,this.build(guide,native)};Struct.prototype.build=function(guide,native){if(native)this.size=guide.size,"char"===guide.type?this.guide=this._nativeChar:this.guide=DataViewProto[guide.type],this.create=this._native;else{this.guide={};for(var prop,cursor,i=0,keys=Object.keys(guide),klen=keys.length;klen>i;i++)prop=keys[i],cursor=this._getStructure(guide[prop]),this.guide[prop]=cursor,this.size+=cursor.size;this.create=this._create}},Struct.prototype._getStructure=function(propertyGuide){var prop;return"string"==typeof propertyGuide?prop=TypedStruct._getStruct(propertyGuide):(prop=this._generateArray.apply(this,propertyGuide),prop.size=this._arraySize(propertyGuide)),prop},Struct.prototype._generateArray=function(type,x,y,z){var struct=TypedStruct._getStruct(type),argslen=arguments.length-1;switch(argslen){case 1:return this._arrays[1].bind(this,struct,x);case 2:return this._arrays[2].bind(this,struct,x,y);case 3:return this._arrays[3].bind(this,struct,x,y,z);default:return this._arrays.other.bind(this,struct,Array.prototype.slice.call(arguments,1))}},Struct.prototype._arraySize=function(properties){for(var type=TypedStruct._getStruct(properties[0]),sum=type.size*properties[i],i=2,len=properties.length;len>i;i++)sum*=properties[i];return sum},Struct.prototype._arrays={1:function(structure,x,dataViewCursor){for(var out=[],_x=0;x>_x;_x++)out[_x]=structure(dataViewCursor);return out},2:function(structure,x,y,dataViewCursor){var cursor,_x,_y,out=[];for(_x=0;x>_x;_x++)for(out[_x]=[],cursor=out[_x],_y=0;y>_y;_y++)cursor[_y]=structure(dataViewCursor);return out},3:function(structure,x,y,z,dataViewCursor){var cursorx,cursory,_x,_y,_z,out=[];for(_x=0;x>_x;_x++)for(out[_x]=[],cursorx=out[_x],_y=0;y>_y;_y++)for(cursorx[_y]=[],cursory=cursorx[_y],_z=0;z>_z;_z++)cursory[_z]=structure(dataViewCursor);return out},other:function(structure,dim,dataViewCursor){}},Struct.prototype._native=function(dataViewCursor){var out=this.guide.call(dataViewCursor.dataView,dataViewCursor.cursor,TypedStruct._littleEndian);return dataViewCursor.incrementCursor(this.size),out},Struct.prototype._nativeChar=function(cursor,littleEndian){var out=DataViewInt8.call(this,cursor,littleEndian);return 0===out?"":String.fromCharCode(out)},Struct.prototype._create=function(dataViewCursor){for(var prop,guide=this.guide,out={},i=0,keys=Object.keys(guide),klen=keys.length;klen>i;i++)prop=keys[i],out[prop]=guide[prop](dataViewCursor);return out},Struct.prototype.factory=function(){var func=this.create.bind(this);return func.size=this.size,func};var DataViewCursor=function(dataView,offset){this.dataView=dataView,this.cursor=offset||0};return DataViewCursor.prototype.setCursor=function(val){return this.cursor=val,this},DataViewCursor.prototype.incrementCursor=function(val){return this.cursor+=val,this},DataViewCursor.prototype.create=function(name,amount){var output,struct=TypedStruct._structs[name];if(amount&&amount>1){for(output=[];amount--;)output.push(struct(this));return output}return struct(this)},function(TypedStruct){for(var prop,basicTypes={"byte":{size:1,type:"getInt8"},Ubyte:{size:1,type:"getUint8"},"char":{size:1,type:"char"},"short":{size:2,type:"getInt16"},Ushort:{size:2,type:"getUint16"},"int":{size:4,type:"getInt32"},Uint:{size:4,type:"getUint32"},"long":{size:4,type:"getInt32"},Ulong:{size:4,type:"getUint32"},"float":{size:4,type:"getFloat32"},"double":{size:8,type:"getFloat64"}},i=0,keys=Object.keys(basicTypes),klen=keys.length;klen>i;i++)prop=keys[i],TypedStruct.add(prop,basicTypes[prop],!0)}(TypedStruct),TypedStruct});